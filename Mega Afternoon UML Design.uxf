<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>665</x>
      <y>448</y>
      <w>119</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>Created by Seth Morris
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>518</x>
      <y>245</y>
      <w>280</w>
      <h>189</h>
    </coordinates>
    <panel_attributes>Model :: Node&lt;Type&gt;
--
Data Members
-nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
Constructors

+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

Methods

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(TypeData) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>497</x>
      <y>49</y>
      <w>273</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+IntNode() : constructor
+IntNode(int value) : init
+IntNOde(int value, IntNode * nextNode) : constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>462</x>
      <y>0</y>
      <w>651</w>
      <h>231</h>
    </coordinates>
    <panel_attributes>Typed Sample
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>875</x>
      <y>91</y>
      <w>196</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>763</x>
      <y>140</y>
      <w>126</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>160.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>791</x>
      <y>308</y>
      <w>77</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>854</x>
      <y>252</y>
      <w>343</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>Model :: Array&lt;Type&gt;
--
Data Members

- front : Node&lt;Type&gt;*
- size : int

--
Constructors
+ Array() : constructor
+ array(int size) : constructor

Advanced

+ ~Array&lt;Type&gt;(): destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor
Methods

+ getSize(): int
+ setAtIndex(int index, Type Value) : void
+ getFromIndex(int index) : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>868</x>
      <y>525</y>
      <w>301</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size: int
- front : Node&lt;Type&gt;*
- end : Node&lt;Type&gt;*
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const ; int
+ getFront() const : Node&lt;Type&gt;*
+ getEnd() const : Node&lt;Type&gt;*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>784</x>
      <y>392</y>
      <w>98</w>
      <h>231</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>120.0;310.0;70.0;310.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>518</x>
      <y>427</y>
      <w>91</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>448</x>
      <y>504</y>
      <w>336</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *

--
+ BIDirectionalNode(): constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt;* previous,
					BiDirectionalNode&lt;Type&gt; next : constructor
+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode(): BiDirectionalNode&lt;Type&gt; *
+ getNextNode(); BiDirectionalNode&lt;Type&gt; * next): void
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>448</x>
      <y>700</y>
      <w>336</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt;*
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
Non virtual methods
+ getSize() const : int
+ getFront() const: BiDirectionalNode&lt;Type&gt;*
+ getEnd() const: BiDirectionalNode&lt;Type&gt;*

virtual methods
+ add(Type value)
+ remove(int)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>721</x>
      <y>931</y>
      <w>182</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>Queue
--
- front : BiDirectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size: int
--
+ Queue() : constructor
+ ~Queue(): destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>595</x>
      <y>861</y>
      <w>175</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;230.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>518</x>
      <y>931</y>
      <w>203</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt;*
- size: int 
--
+ CircularlyLinkedList() : constructor
+ ~CircularlyLinkedList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>595</x>
      <y>861</y>
      <w>21</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>777</x>
      <y>602</y>
      <w>63</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;240.0;70.0;240.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>329</x>
      <y>931</y>
      <w>189</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>Stack
--
- front : BiDirectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size: int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>483</x>
      <y>861</y>
      <w>133</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>170.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>966</x>
      <y>938</y>
      <w>70</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>DoubleList&lt;Type&gt;
--
- front: BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--

+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addAtIndexFast(int index, Type value) : void  </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>343</y>
      <w>196</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData: Type(inheirited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt;*
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt;*
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt;*
--
+ BinarySearchTreeNode(): constructor
+ BinarySearchTreeNode(Type data): constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ getRightChildPointer(): BinarySearchTreeNode&lt;Type&gt;*

+ setRootPointer(BinarySearchTreeNode&lt;Type&gt;* root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt;* left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt;* right) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>189</x>
      <y>343</y>
      <w>343</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>470.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>252</x>
      <y>476</y>
      <w>189</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>Model:: Tree&lt;Type&gt;
--
- size : int
- height : int
- complete : bool
- balanced : bool
--
+ Tree(): constructor
+ ~Tree(): destructor
+ getSize() : int
+ getHeight() : int
+ getComplete() : bool
+ isBalanced() : bool

+ setSize(int size) : void
+ setHeight(int height) : void
+ setComplete(bool complete) : void
+ setBalanced(bool balanced) : void

+ InOrderTraversal() : void
+ preOrderTraversal(): void
+ postOrderTraversal() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>28</x>
      <y>497</y>
      <w>203</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt;*
- size : int(inherited)
- height : int (inheirited)
- complete: bool(inheirited)
- balanced : bool(inheirited)
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor 

+ getRoot() : BinarySearchTreeNode&lt;Type&gt;*
+ setRoot(BinarySearchTreeNode&lt;Type&gt;* root) : void

- calculateSize(BinarySearchTreeNode&lt;Type&gt;*): int

- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*): void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*): void
- postOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>140</x>
      <y>434</y>
      <w>35</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;30.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>224</x>
      <y>553</y>
      <w>42</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
