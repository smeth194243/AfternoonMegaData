<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>800</x>
      <y>5</y>
      <w>145</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Created by Seth Morris

Extends:

Composition:
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>85</y>
      <w>200</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>Model :: Node&lt;Type&gt;
bg=red
--
Data Members
-nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
Constructors

+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

Methods

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(TypeData) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>345</x>
      <y>30</y>
      <w>195</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>IntNode
bg=cyan
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+IntNode() : constructor
+IntNode(int value) : init
+IntNOde(int value, IntNode * nextNode) : constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>325</x>
      <y>0</y>
      <w>465</w>
      <h>165</h>
    </coordinates>
    <panel_attributes>Sample Data Structure
--
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>590</x>
      <y>60</y>
      <w>140</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>IntNodeArray
bg=magenta
--
- size : int
- front : IntNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>535</x>
      <y>95</y>
      <w>65</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>995</x>
      <y>130</y>
      <w>55</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1035</x>
      <y>0</y>
      <w>245</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Model :: Array&lt;Type&gt;
bg=green
--
Data Members

- front : Node&lt;Type&gt;*
- size : int

--
Constructors
+ Array() : constructor
+ array(int size) : constructor

Advanced

+ ~Array&lt;Type&gt;(): destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor
Methods

+ getSize(): int
+ setAtIndex(int index, Type Value) : void
+ getFromIndex(int index) : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1050</x>
      <y>200</y>
      <w>215</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
bg=orange
--
- size: int
- front : Node&lt;Type&gt;*
- end : Node&lt;Type&gt;*
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const ; int
+ getFront() const : Node&lt;Type&gt;*
+ getEnd() const : Node&lt;Type&gt;*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>995</x>
      <y>185</y>
      <w>65</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>110.0;150.0;70.0;150.0;70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>890</x>
      <y>215</y>
      <w>15</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>785</x>
      <y>265</y>
      <w>240</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
bg=pink
--
- nodeData : Type
- BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *

--
+ BIDirectionalNode(): constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt;* previous,
					BiDirectionalNode&lt;Type&gt; next : constructor
+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode(): BiDirectionalNode&lt;Type&gt; *
+ getNextNode(); BiDirectionalNode&lt;Type&gt; * next): void
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>785</x>
      <y>400</y>
      <w>240</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
bg=light_Gray
--
- front : BiDirectionalNode&lt;Type&gt;*
- end : BiDirectionalNode&lt;Type&gt;*
- size : int
--
DoublyLinkedList(): constructor
virtual ~DoublyLinkedList(): destructor

+ add(Type data): void
+ remove(int index): Type

+ getSize() const : int
+ getFront() const: BiDirectionalNode&lt;Type&gt;*
+ getEnd() const: BiDirectionalNode&lt;Type&gt;*
+ setFront(BiDirectionalNode&lt;Type&gt; front) : void
+ setEnd(BiDirectionalNode&lt;Type&gt; end): void
+ setSize(int size): void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>950</x>
      <y>635</y>
      <w>135</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>Queue
bg=blue
--
- front : BiDirectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size: int
--
+ Queue() : constructor
+ ~Queue(): destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>790</x>
      <y>640</y>
      <w>150</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
bg=green
--
- front : BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt;*
- size: int 
--
+ CircularlyLinkedList() : constructor
+ ~CircularlyLinkedList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1020</x>
      <y>365</y>
      <w>50</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;120.0;80.0;120.0;80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>650</x>
      <y>585</y>
      <w>130</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>Stack
bg=red
--
- front : BiDirectionalNode&lt;Type&gt;*
- end: BiDirectionalNode&lt;Type&gt;*
- size: int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1060</x>
      <y>495</y>
      <w>170</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>DoubleList&lt;Type&gt;
bg=yellow
--
- front: BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addAtIndexFast(int index, Type value) : void  
+ getFromIndex(int index): Type
+ getFromIndexFast(int index): Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>365</x>
      <y>180</y>
      <w>240</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
bg=orange
--
- nodeData: Type(inheirited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt;*
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt;*
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt;*
--
+ BinarySearchTreeNode(): constructor
+ BinarySearchTreeNode(Type data): constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt;*
+ getRightChildPointer(): BinarySearchTreeNode&lt;Type&gt;*

+ setRootPointer(BinarySearchTreeNode&lt;Type&gt;* root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt;* left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt;* right) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>600</x>
      <y>180</y>
      <w>210</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>400.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>645</x>
      <y>335</y>
      <w>105</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>Model:: Tree&lt;Type&gt;
bg=yellow
--
INFORMATIONAL
+ getSize() : int
+ getHeight() : int
+ getComplete() : bool
+ isBalanced() : bool

TRAVERSALS
+ InOrderTraversal() : void
+ preOrderTraversal(): void
+ postOrderTraversal() : void

DATA
+ insert(Type): void
+ contains(Type): void
+ remove(Type): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>365</x>
      <y>355</y>
      <w>250</w>
      <h>350</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
bg=magenta
--
# root : BinarySearchTreeNode&lt;Type&gt;*
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor 

+ getRoot() : BinarySearchTreeNode&lt;Type&gt;*
+ setRoot(BinarySearchTreeNode&lt;Type&gt;* root) : void

RECURSION
# calculateSize(BinarySearchTreeNode&lt;Type&gt;*): int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt;*): int
# isComplete(BinarySearchTreeNode&lt;Type&gt;*, int index, int size): bool
# isBalanced(BinarySearchTreeNode&lt;Type&gt;*): bool

# removeNode(BinarySearchTreeNode&lt;Type&gt;*): void

# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*): void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*): void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt;*): void

# getLeftMostChild(BinarySearchTreeNode&lt;Type&gt;*): BinarySearchTreeNode&lt;Type&gt;*
# getRightMostChild(BinarySearchTreeNode&lt;Type&gt;*): BinarySearchTreeNode&lt;Type&gt;*

INFORMATIONAL
+ getSize(): int
+ getHeight(): int
+ isBalanced(): bool
+ isComplete(): bool

TRAVERSAL
+ inOrderTraversal(): void
+ preOrderTraversal(): void
+ postOrderTraversal(): void

DATA
+ insert(Type): void
+ contains(Type): void
+ remove(Type) : void
+ findMaximum(): Type
+ findMinimum(): Type

DEMO
+ demoTraversalSteps(BinarySearchTreeNode&lt;Type&gt;*): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>305</y>
      <w>25</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>395</y>
      <w>45</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>835</x>
      <y>25</y>
      <w>95</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>840</x>
      <y>55</y>
      <w>95</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>890</x>
      <y>525</y>
      <w>15</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>890</x>
      <y>525</y>
      <w>180</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0;340.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>855</x>
      <y>525</y>
      <w>50</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>80.0;10.0;80.0;150.0;10.0;150.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>775</x>
      <y>525</y>
      <w>130</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>240.0;10.0;240.0;150.0;10.0;150.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>890</x>
      <y>525</y>
      <w>105</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;150.0;190.0;150.0;190.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>305</y>
      <w>320</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>Model:: AVLTree&lt;Type&gt;
bg=green
--
# root: BinarySearchTreeNode&lt;Type&gt;* (inherited)
--

+ AVLTree(): constructor
+ ~AVLTree(): destructor

ROTATIONS
- leftRotation(BinarySearchTreeNode&lt;Type&gt;* parent): BinarySearchTreeNode&lt;Type&gt;*
- rightRotation(BinarySearchTreeNode&lt;Type&gt;* first): BinarySearchTreeNode&lt;Type&gt;*
- leftRightRotation(BinarySearchTreeNode&lt;Type&gt;* first): BinarySearchTreeNode&lt;Type&gt;*
- rightLeftRotation(BinarySearchTreeNode&lt;Type&gt;* first): BinarySearchTreeNode&lt;Type&gt;*

HELPERS
- insertNode(BinarySearchTreeNode&lt;Type&gt;* , Type value): BinarySearchTreeNode&lt;Type&gt;*
- removeNode(BinarySearchTreeNode&lt;Type&gt;* , Type value): BinarySearchTreeNode&lt;Type&gt;*
- balanceSubTree(BinarySearchTreeNode&lt;Type&gt;*): BinarySearchTreeNode&lt;Type&gt;*
- heightDifference(BinarySearchTreeNode&lt;Type&gt;* parent): int

DATA
+ insert(Type): void
+ remove(Type): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>290</x>
      <y>280</y>
      <w>85</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>150.0;10.0;10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>315</x>
      <y>385</y>
      <w>60</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>25</x>
      <y>495</y>
      <w>290</w>
      <h>255</h>
    </coordinates>
    <panel_attributes>Model::Graph&lt;Type&gt;
bg=cyan
--
- static const MAXIMUM: int
- adjacencyMatrix: bool[][]
- graphData: Type[]
- vertexCount: int
--
+ Graph(): constructor
+ ~Graph(): destructor

OPERATIONS
+ addVertex(const Type&amp; value): void
+ addEdge(int source, int target): void
+ removeEdge(int source, int target): void
+ addEdgeUndirected(int source, int target): void
+ removeEdgeUndirected(int source, int target): void

ACCESS
+ operator[] (int vertex): Type&amp;
+ operator[] (int vertex) const : Type
+ size() const: int

CONNECTIONS
+ hasUndirectedConnection(int source, int target) const : bool
+ areConnected(int source, int target) const : bool
+ neighbors(int vertex) const : std::set&lt;int&gt;

TRAVERSALS
+ depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex): void
+ breadthFirstTraversal(Graph&lt;Type&gt; graph, int vertex): void

RECURSION
- depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex, bool markedVerticies[]): void</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
